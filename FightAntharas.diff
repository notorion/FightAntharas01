diff --git dist/game/config/GrandBoss.ini dist/game/config/GrandBoss.ini
index fb94ae1..c32cc98 100644
--- dist/game/config/GrandBoss.ini
+++ dist/game/config/GrandBoss.ini
@@ -1,5 +1,5 @@
 # ---------------------------------------------------------------------------
-# Antharas
+# Antharas.java old disabled for antharas.txt
 # ---------------------------------------------------------------------------
 
 # Delay of appearance time of Antharas. Value is minute. Range 3-60
diff --git dist/game/data/html/default/34543.htm dist/game/data/html/default/34543.htm
index c579c8e..139336b 100644
--- dist/game/data/html/default/34543.htm
+++ dist/game/data/html/default/34543.htm
@@ -5,5 +5,5 @@
 <Button ALIGN=LEFT ICON="NORMAL" action="bypass -h npc_%objectId%_Quest LastImperialTomb">Fight Frintezza</Button>
 <Button ALIGN=LEFT ICON="NORMAL" action="bypass -h Quest OctavisWarzone enterExtremeInstance">Fight Octavis</Button><br>
 <font color="LEVEL">- High difficulty:</font><font color="ff6868"> Lv. 112, 21+ characters in the command channel</font><br1>
-<Button ALIGN=LEFT ICON="NORMAL" action="bypass -h npc_%objectId%_Quest Antharas">Fight Antharas</Button>
+<Button ALIGN=LEFT ICON="NORMAL" action="bypass -h npc_%objectId%_Quest FightAntharas">Fight Antharas</Button>
 </body></html>
\ No newline at end of file
diff --git dist/game/data/scripts/ai/bosses/Antharas/Antharas.java dist/game/data/scripts/ai/bosses/Antharas/Antharas.java
deleted file mode 100644
index 9bf351b..0000000
--- dist/game/data/scripts/ai/bosses/Antharas/Antharas.java
+++ /dev/null
@@ -1,810 +0,0 @@
-/*
- * This file is part of the L2J Mobius project.
- * 
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * General Public License for more details.
- * 
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-package ai.bosses.Antharas;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.l2jmobius.Config;
-import org.l2jmobius.commons.util.CommonUtil;
-import org.l2jmobius.gameserver.ai.CtrlIntention;
-import org.l2jmobius.gameserver.enums.MountType;
-import org.l2jmobius.gameserver.instancemanager.ZoneManager;
-import org.l2jmobius.gameserver.model.Location;
-import org.l2jmobius.gameserver.model.World;
-import org.l2jmobius.gameserver.model.actor.Attackable;
-import org.l2jmobius.gameserver.model.actor.Npc;
-import org.l2jmobius.gameserver.model.actor.Player;
-import org.l2jmobius.gameserver.model.holders.SkillHolder;
-import org.l2jmobius.gameserver.model.instancezone.Instance;
-import org.l2jmobius.gameserver.model.skill.Skill;
-import org.l2jmobius.gameserver.model.skill.SkillCaster;
-import org.l2jmobius.gameserver.model.zone.type.NoRestartZone;
-import org.l2jmobius.gameserver.network.NpcStringId;
-import org.l2jmobius.gameserver.network.serverpackets.ExShowScreenMessage;
-import org.l2jmobius.gameserver.network.serverpackets.NpcInfo;
-import org.l2jmobius.gameserver.network.serverpackets.PlaySound;
-import org.l2jmobius.gameserver.network.serverpackets.ServerPacket;
-import org.l2jmobius.gameserver.network.serverpackets.SocialAction;
-import org.l2jmobius.gameserver.network.serverpackets.SpecialCamera;
-
-import instances.AbstractInstance;
-
-/**
- * Antharas
- * @author Sero
- */
-public class Antharas extends AbstractInstance
-{
-	// NPCs
-	private static final int ANTHARAS = 29223; // Antharas
-	private static final int CUBE = 31859; // Teleportation Cubic
-	private static final int GUIDE = 34543;
-	private static final Map<Integer, Location> INVISIBLE_NPC = new HashMap<>();
-	static
-	{
-		INVISIBLE_NPC.put(29077, new Location(177229, 113298, -7735)); // antaras_clear_npc_1
-		INVISIBLE_NPC.put(29078, new Location(176707, 113585, -7735)); // antaras_clear_npc_2
-		INVISIBLE_NPC.put(29079, new Location(176385, 113889, -7735)); // antaras_clear_npc_3
-		INVISIBLE_NPC.put(29080, new Location(176082, 114241, -7735)); // antaras_clear_npc_4
-		INVISIBLE_NPC.put(29081, new Location(176066, 114802, -7735)); // antaras_clear_npc_5
-		INVISIBLE_NPC.put(29082, new Location(176095, 115313, -7735)); // antaras_clear_npc_6
-		INVISIBLE_NPC.put(29083, new Location(176425, 115829, -7735)); // antaras_clear_npc_7
-		INVISIBLE_NPC.put(29084, new Location(176949, 116378, -7735)); // antaras_clear_npc_8
-		INVISIBLE_NPC.put(29085, new Location(177655, 116402, -7735)); // antaras_clear_npc_9
-		INVISIBLE_NPC.put(29086, new Location(178248, 116395, -7735)); // antaras_clear_npc_10
-		INVISIBLE_NPC.put(29087, new Location(178706, 115998, -7735)); // antaras_clear_npc_11
-		INVISIBLE_NPC.put(29088, new Location(179208, 115452, -7735)); // antaras_clear_npc_12
-		INVISIBLE_NPC.put(29089, new Location(179191, 115079, -7735)); // antaras_clear_npc_13
-		INVISIBLE_NPC.put(29090, new Location(179221, 114546, -7735)); // antaras_clear_npc_14
-		INVISIBLE_NPC.put(29091, new Location(178916, 113925, -7735)); // antaras_clear_npc_15
-		INVISIBLE_NPC.put(29092, new Location(178782, 113814, -7735)); // antaras_clear_npc_16
-		INVISIBLE_NPC.put(29093, new Location(178419, 113417, -7735)); // antaras_clear_npc_17
-		INVISIBLE_NPC.put(29094, new Location(177855, 113282, -7735)); // antaras_clear_npc_18
-	}
-	// Skill
-	private static final SkillHolder ANTH_JUMP = new SkillHolder(4106, 1); // Antharas Stun
-	private static final SkillHolder ANTH_TAIL = new SkillHolder(4107, 1); // Antharas Stun
-	private static final SkillHolder ANTH_FEAR = new SkillHolder(4108, 1); // Antharas Terror
-	private static final SkillHolder ANTH_DEBUFF = new SkillHolder(4109, 1); // Curse of Antharas
-	private static final SkillHolder ANTH_MOUTH = new SkillHolder(4110, 2); // Breath Attack
-	private static final SkillHolder ANTH_BREATH = new SkillHolder(4111, 1); // Antharas Fossilization
-	private static final SkillHolder ANTH_NORM_ATTACK = new SkillHolder(4112, 1); // Ordinary Attack
-	private static final SkillHolder ANTH_NORM_ATTACK_EX = new SkillHolder(4113, 1); // Animal doing ordinary attack
-	private static final SkillHolder ANTH_REGEN_1 = new SkillHolder(4125, 1); // Antharas Regeneration
-	private static final SkillHolder ANTH_REGEN_2 = new SkillHolder(4239, 1); // Antharas Regeneration
-	private static final SkillHolder ANTH_REGEN_3 = new SkillHolder(4240, 1); // Antharas Regeneration
-	private static final SkillHolder ANTH_REGEN_4 = new SkillHolder(4241, 1); // Antharas Regeneration
-	private static final SkillHolder DISPEL_BOM = new SkillHolder(5042, 1); // NPC Dispel Bomb
-	private static final SkillHolder ANTH_ANTI_STRIDER = new SkillHolder(4258, 1); // Hinder Strider
-	private static final SkillHolder ANTH_FEAR_SHORT = new SkillHolder(5092, 1); // Antharas Terror
-	private static final SkillHolder ANTH_METEOR = new SkillHolder(5093, 1); // Antharas Meteor
-	// Zone
-	private static final NoRestartZone ZONE = ZoneManager.getInstance().getZoneById(70050, NoRestartZone.class); // Antharas Nest zone
-	// @formatter:on
-	// Reward
-	private static final int REWARD_BOX = 82243;
-	// Misc
-	private static final int TEMPLATE_ID = 304;
-	
-	public Antharas()
-	{
-		super(TEMPLATE_ID);
-		addTalkId(GUIDE, CUBE);
-		addSpawnId(INVISIBLE_NPC.keySet());
-		addSpawnId(ANTHARAS);
-		addSpellFinishedId(ANTHARAS);
-		addAttackId(ANTHARAS);
-		addKillId(ANTHARAS);
-	}
-	
-	@Override
-	public String onEvent(String event, Npc npc, Player player)
-	{
-		switch (event)
-		{
-			case "SPAWN_ANTHARAS":
-			{
-				final Instance world = player.getInstanceWorld();
-				if (world == null)
-				{
-					return null;
-				}
-				
-				final Npc antharas = addSpawn(ANTHARAS, 185708, 114298, -8221, 0, false, 0, false, world.getId());
-				antharas.disableCoreAI(true);
-				antharas.setRandomWalking(false);
-				antharas.teleToLocation(181323, 114850, -7623, 32542);
-				broadcastPacket(world, new PlaySound("BS02_A"));
-				startQuestTimer("CAMERA_1", 23, antharas, null, false);
-				broadcastPacket(world, new NpcInfo(antharas));
-				world.setParameter("antharas", antharas);
-				break;
-			}
-			case "CAMERA_1":
-			{
-				final Instance world = npc.getInstanceWorld();
-				if (world == null)
-				{
-					return null;
-				}
-				
-				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
-				broadcastPacket(world, new SpecialCamera(antharas, 700, 13, -19, 0, 10000, 20000, 0, 0, 0, 0, 0));
-				startQuestTimer("CAMERA_2", 3000, npc, null, false);
-				break;
-			}
-			case "CAMERA_2":
-			{
-				final Instance world = npc.getInstanceWorld();
-				if (world == null)
-				{
-					return null;
-				}
-				
-				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
-				broadcastPacket(world, new SpecialCamera(antharas, 700, 13, 0, 6000, 10000, 20000, 0, 0, 0, 0, 0));
-				startQuestTimer("CAMERA_3", 10000, npc, null, false);
-				break;
-			}
-			case "CAMERA_3":
-			{
-				final Instance world = npc.getInstanceWorld();
-				if (world == null)
-				{
-					return null;
-				}
-				
-				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
-				broadcastPacket(world, new SpecialCamera(antharas, 3700, 0, -3, 0, 10000, 10000, 0, 0, 0, 0, 0));
-				broadcastPacket(world, new SocialAction(antharas.getObjectId(), 1));
-				startQuestTimer("CAMERA_4", 200, npc, null, false);
-				startQuestTimer("SOCIAL", 5200, npc, null, false);
-				break;
-			}
-			case "CAMERA_4":
-			{
-				final Instance world = npc.getInstanceWorld();
-				if (world == null)
-				{
-					return null;
-				}
-				
-				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
-				broadcastPacket(world, new SpecialCamera(antharas, 1100, 0, -3, 22000, 10000, 30000, 0, 0, 0, 0, 0));
-				startQuestTimer("CAMERA_5", 10800, npc, null, false);
-				break;
-			}
-			case "CAMERA_5":
-			{
-				final Instance world = npc.getInstanceWorld();
-				if (world == null)
-				{
-					return null;
-				}
-				
-				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
-				broadcastPacket(world, new SpecialCamera(antharas, 1100, 0, -3, 300, 10000, 7000, 0, 0, 0, 0, 0));
-				startQuestTimer("START_MOVE", 1900, npc, null, false);
-				break;
-			}
-			case "SOCIAL":
-			{
-				final Instance world = npc.getInstanceWorld();
-				if (world == null)
-				{
-					return null;
-				}
-				
-				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
-				broadcastPacket(world, new SocialAction(antharas.getObjectId(), 2));
-				break;
-			}
-			case "START_MOVE":
-			{
-				final Instance world = npc.getInstanceWorld();
-				if (world == null)
-				{
-					return null;
-				}
-				
-				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
-				antharas.disableCoreAI(false);
-				antharas.setRandomWalking(true);
-				
-				for (Player players : World.getInstance().getVisibleObjectsInRange(npc, Player.class, 4000))
-				{
-					if (players.isHero())
-					{
-						broadcastPacket(world, new ExShowScreenMessage(NpcStringId.S1_YOU_CANNOT_HOPE_TO_DEFEAT_ME_WITH_YOUR_MEAGER_STRENGTH, 2, 4000, players.getName()));
-						break;
-					}
-				}
-				
-				antharas.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, new Location(179011, 114871, -7704));
-				startQuestTimer("CHECK_ATTACK", 60000, antharas, null, false);
-				break;
-			}
-			case "SET_REGEN":
-			{
-				if (npc != null)
-				{
-					if (npc.getCurrentHp() < (npc.getMaxHp() * 0.25))
-					{
-						if (!npc.isAffectedBySkill(ANTH_REGEN_4.getSkillId()))
-						{
-							npc.getAI().setIntention(CtrlIntention.AI_INTENTION_CAST, ANTH_REGEN_4.getSkill(), npc);
-						}
-					}
-					else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.5))
-					{
-						if (!npc.isAffectedBySkill(ANTH_REGEN_3.getSkillId()))
-						{
-							npc.getAI().setIntention(CtrlIntention.AI_INTENTION_CAST, ANTH_REGEN_3.getSkill(), npc);
-						}
-					}
-					else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.75))
-					{
-						if (!npc.isAffectedBySkill(ANTH_REGEN_2.getSkillId()))
-						{
-							npc.getAI().setIntention(CtrlIntention.AI_INTENTION_CAST, ANTH_REGEN_2.getSkill(), npc);
-						}
-					}
-					else if (!npc.isAffectedBySkill(ANTH_REGEN_1.getSkillId()))
-					{
-						npc.getAI().setIntention(CtrlIntention.AI_INTENTION_CAST, ANTH_REGEN_1.getSkill(), npc);
-					}
-					startQuestTimer("SET_REGEN", 60000, npc, player, false);
-				}
-				break;
-			}
-			case "CHECK_ATTACK":
-			{
-				if (npc != null)
-				{
-					final int attacker1hate = npc.getInstanceWorld().getParameters().getInt("attacker1hate", 0);
-					if (attacker1hate > 10)
-					{
-						npc.getInstanceWorld().getParameters().set("attacker1hate", attacker1hate - getRandom(10));
-					}
-					final int attacker2hate = npc.getInstanceWorld().getParameters().getInt("attacker2hate", 0);
-					if (attacker2hate > 10)
-					{
-						npc.getInstanceWorld().getParameters().set("attacker2hate", attacker2hate - getRandom(10));
-					}
-					final int attacker3hate = npc.getInstanceWorld().getParameters().getInt("attacker3hate", 0);
-					if (attacker3hate > 10)
-					{
-						npc.getInstanceWorld().getParameters().set("attacker3hate", attacker3hate - getRandom(10));
-					}
-					manageSkills(npc);
-					startQuestTimer("CHECK_ATTACK", 60000, npc, null, false);
-				}
-				break;
-			}
-			
-			case "TID_USED_FEAR":
-			{
-				if (npc != null)
-				{
-					final int sandStorm = npc.getInstanceWorld().getParameters().getInt("sandStorm", 0);
-					if (sandStorm == 0)
-					{
-						npc.getInstanceWorld().getParameters().set("sandStorm", 1);
-						npc.disableCoreAI(true);
-						npc.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, new Location(177648, 114816, -7735));
-						startQuestTimer("TID_FEAR_MOVE_TIMEOVER", 2000, npc, null);
-						startQuestTimer("TID_FEAR_COOLTIME", 300000, npc, null);
-					}
-				}
-				break;
-			}
-			case "TID_FEAR_COOLTIME":
-			{
-				npc.getInstanceWorld().getParameters().set("sandStorm", 0);
-				break;
-			}
-			case "TID_FEAR_MOVE_TIMEOVER":
-			{
-				final int sandStorm = npc.getInstanceWorld().getParameters().getInt("sandStorm", 0);
-				if ((sandStorm == 1) && (npc.getX() == 177648) && (npc.getY() == 114816))
-				{
-					npc.getInstanceWorld().getParameters().set("sandStorm", 2);
-					npc.getInstanceWorld().getParameters().set("moveChance", 0);
-					npc.disableCoreAI(false);
-					INVISIBLE_NPC.entrySet().forEach(entry -> addSpawn(entry.getKey(), entry.getValue()));
-				}
-				else if (sandStorm == 1)
-				{
-					final int moveChance = npc.getInstanceWorld().getParameters().getInt("moveChance", 0);
-					if (moveChance <= 3)
-					{
-						npc.getInstanceWorld().getParameters().set("moveChance", moveChance + 1);
-						npc.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, new Location(177648, 114816, -7735));
-						startQuestTimer("TID_FEAR_MOVE_TIMEOVER", 5000, npc, null);
-					}
-					else
-					{
-						npc.teleToLocation(177648, 114816, -7735, npc.getHeading());
-						startQuestTimer("TID_FEAR_MOVE_TIMEOVER", 1000, npc, null);
-					}
-				}
-				break;
-			}
-			case "MANAGE_SKILL":
-			{
-				manageSkills(npc);
-				break;
-			}
-		}
-		return null;
-	}
-	
-	@Override
-	public String onAggroRangeEnter(Npc npc, Player player, boolean isSummon)
-	{
-		npc.doCast(DISPEL_BOM.getSkill());
-		npc.doDie(player);
-		return super.onAggroRangeEnter(npc, player, isSummon);
-	}
-	
-	@Override
-	public String onAttack(Npc npc, Player attacker, int damage, boolean isSummon, Skill skill)
-	{
-		if (npc.getId() == ANTHARAS)
-		{
-			if (!ZONE.isCharacterInZone(attacker))
-			{
-				LOGGER.warning(getClass().getSimpleName() + ": Player " + attacker.getName() + " attacked Antharas in invalid conditions!");
-				attacker.teleToLocation(80464, 152294, -3534);
-			}
-			
-			if ((attacker.getMountType() == MountType.STRIDER) && !attacker.isAffectedBySkill(ANTH_ANTI_STRIDER.getSkillId()) && SkillCaster.checkUseConditions(npc, ANTH_ANTI_STRIDER.getSkill()))
-			{
-				addSkillCastDesire(npc, attacker, ANTH_ANTI_STRIDER.getSkill(), 100);
-			}
-			
-			if (skill == null)
-			{
-				refreshAiParams(attacker, damage * 1000);
-			}
-			else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.25))
-			{
-				refreshAiParams(attacker, (damage / 3) * 100);
-			}
-			else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.5))
-			{
-				refreshAiParams(attacker, damage * 20);
-			}
-			else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.75))
-			{
-				refreshAiParams(attacker, damage * 10);
-			}
-			else
-			{
-				refreshAiParams(attacker, (damage / 3) * 20);
-			}
-			manageSkills(npc);
-		}
-		return super.onAttack(npc, attacker, damage, isSummon, skill);
-	}
-	
-	@Override
-	public String onKill(Npc npc, Player killer, boolean isSummon)
-	{
-		final Instance world = killer.getInstanceWorld();
-		final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
-		if (ZONE.isCharacterInZone(killer) && (npc.getId() == ANTHARAS))
-		{
-			notifyEvent("DESPAWN_MINIONS", null, null);
-			ZONE.broadcastPacket(new SpecialCamera(antharas, 1200, 20, -10, 0, 10000, 13000, 0, 0, 0, 0, 0));
-			ZONE.broadcastPacket(new PlaySound("BS01_D"));
-			
-			// After defeating Antharas all players in the zone receive Antharas' Reward Pack.
-			for (Player player : world.getPlayers())
-			{
-				giveItems(player, REWARD_BOX, 1);
-			}
-			
-			world.finishInstance();
-		}
-		return super.onKill(npc, killer, isSummon);
-	}
-	
-	@Override
-	public void onMoveFinished(Npc npc)
-	{
-		npc.doCast(DISPEL_BOM.getSkill());
-		npc.doDie(null);
-	}
-	
-	@Override
-	public String onSpawn(Npc npc)
-	{
-		if (npc.getId() == ANTHARAS)
-		{
-			((Attackable) npc).setCanReturnToSpawnPoint(false);
-			npc.setRandomWalking(false);
-			cancelQuestTimer("SET_REGEN", npc, null);
-			startQuestTimer("SET_REGEN", 60000, npc, null);
-		}
-		return super.onSpawn(npc);
-	}
-	
-	@Override
-	public String onSpellFinished(Npc npc, Player player, Skill skill)
-	{
-		if ((skill.getId() == ANTH_FEAR.getSkillId()) || (skill.getId() == ANTH_FEAR_SHORT.getSkillId()))
-		{
-			startQuestTimer("TID_USED_FEAR", 7000, npc, null);
-		}
-		startQuestTimer("MANAGE_SKILL", 1000, npc, null);
-		return super.onSpellFinished(npc, player, skill);
-	}
-	
-	private void refreshAiParams(Player attacker, int damage)
-	{
-		final Instance world = attacker.getInstanceWorld();
-		if (world == null)
-		{
-			return;
-		}
-		
-		final Player attacker1 = world.getParameters().getObject("attacker1", Player.class);
-		final Player attacker2 = world.getParameters().getObject("attacker2", Player.class);
-		final Player attacker3 = world.getParameters().getObject("attacker3", Player.class);
-		final int attacker1hate = world.getParameters().getInt("attacker1hate", 0);
-		final int attacker2hate = world.getParameters().getInt("attacker2hate", 0);
-		final int attacker3hate = world.getParameters().getInt("attacker3hate", 0);
-		
-		if ((attacker1 != null) && (attacker == attacker1))
-		{
-			if (attacker1hate < (damage + 1000))
-			{
-				world.getParameters().set("attacker1hate", damage + getRandom(3000));
-			}
-		}
-		else if ((attacker2 != null) && (attacker == attacker2))
-		{
-			if (attacker2hate < (damage + 1000))
-			{
-				world.getParameters().set("attacker2hate", damage + getRandom(3000));
-			}
-		}
-		else if ((attacker3 != null) && (attacker == attacker3))
-		{
-			if (attacker3hate < (damage + 1000))
-			{
-				world.getParameters().set("attacker3hate", damage + getRandom(3000));
-			}
-		}
-		else
-		{
-			final int i1 = CommonUtil.min(attacker1hate, attacker2hate, attacker3hate);
-			if (attacker1hate == i1)
-			{
-				world.getParameters().set("attacker1hate", damage + getRandom(3000));
-				attacker.getInstanceWorld().getParameters().set("attacker1", attacker);
-			}
-			else if (attacker2hate == i1)
-			{
-				world.getParameters().set("attacker2hate", damage + getRandom(3000));
-				attacker.getInstanceWorld().getParameters().set("attacker2", attacker);
-			}
-			else if (attacker3hate == i1)
-			{
-				world.getParameters().set("attacker3hate", damage + getRandom(3000));
-				attacker.getInstanceWorld().getParameters().set("attacker3", attacker);
-			}
-		}
-	}
-	
-	@Override
-	public String onTalk(Npc npc, Player player)
-	{
-		if (npc.getId() == GUIDE)
-		{
-			enterInstance(player, npc, TEMPLATE_ID);
-			Instance world = player.getInstanceWorld();
-			if ((world != null) && world.isStatus(0))
-			{
-				world.setStatus(1);
-				startQuestTimer("SPAWN_ANTHARAS", Config.ANTHARAS_WAIT_TIME * 60000, null, player);
-			}
-		}
-		else // Teleport Cube
-		{
-			Instance world = player.getInstanceWorld();
-			if (world != null)
-			{
-				teleportPlayerOut(player, world);
-			}
-		}
-		return null;
-	}
-	
-	private void broadcastPacket(Instance world, ServerPacket packet)
-	{
-		for (Player player : world.getPlayers())
-		{
-			if ((player != null) && player.isOnline())
-			{
-				player.sendPacket(packet);
-			}
-		}
-	}
-	
-	private void manageSkills(Npc npc)
-	{
-		if (npc.isCastingNow() || npc.isCoreAIDisabled() || !npc.isInCombat())
-		{
-			return;
-		}
-		
-		final Instance world = npc.getInstanceWorld();
-		if (world == null)
-		{
-			return;
-		}
-		
-		int i1 = 0;
-		int i2 = 0;
-		Player c2 = null;
-		final Player attacker1 = world.getParameters().getObject("attacker1", Player.class);
-		int attacker1hate = world.getParameters().getInt("attacker1hate", 0);
-		if ((attacker1 == null) || (npc.calculateDistance3D(attacker1) > 9000) || attacker1.isDead())
-		{
-			attacker1hate = 0;
-			world.getParameters().set("attacker1hate", attacker1hate);
-		}
-		
-		final Player attacker2 = world.getParameters().getObject("attacker2", Player.class);
-		int attacker2hate = world.getParameters().getInt("attacker2hate", 0);
-		if ((attacker2 == null) || (npc.calculateDistance3D(attacker2) > 9000) || attacker2.isDead())
-		{
-			attacker2hate = 0;
-			world.getParameters().set("attacker2hate", attacker2hate);
-		}
-		
-		final Player attacker3 = world.getParameters().getObject("attacker3", Player.class);
-		int attacker3hate = world.getParameters().getInt("attacker3hate", 0);
-		if ((attacker3 == null) || (npc.calculateDistance3D(attacker3) > 9000) || attacker3.isDead())
-		{
-			attacker3hate = 0;
-			world.getParameters().set("attacker3hate", attacker3hate);
-		}
-		
-		if (attacker1hate > attacker2hate)
-		{
-			i1 = 2;
-			i2 = attacker1hate;
-			c2 = attacker1;
-		}
-		else if (attacker2hate > 0)
-		{
-			i1 = 3;
-			i2 = attacker2hate;
-			c2 = attacker2;
-		}
-		
-		if (attacker3hate > i2)
-		{
-			i1 = 4;
-			i2 = attacker3hate;
-			c2 = attacker3;
-		}
-		if (i2 > 0)
-		{
-			if (getRandom(100) < 70)
-			{
-				switch (i1)
-				{
-					case 2:
-					{
-						attacker1hate = 500;
-						world.getParameters().set("attacker1hate", attacker1hate);
-						break;
-					}
-					case 3:
-					{
-						attacker2hate = 500;
-						world.getParameters().set("attacker1hate", attacker2hate);
-						break;
-					}
-					case 4:
-					{
-						attacker3hate = 500;
-						world.getParameters().set("attacker1hate", attacker3hate);
-						break;
-					}
-				}
-			}
-			
-			final double distanceC2 = npc.calculateDistance3D(c2);
-			final double directionC2 = npc.calculateDirectionTo(c2);
-			SkillHolder skillToCast = null;
-			boolean castOnTarget = false;
-			if (npc.getCurrentHp() < (npc.getMaxHp() * 0.25))
-			{
-				if (getRandom(100) < 30)
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_MOUTH;
-				}
-				else if ((getRandom(100) < 80) && (((distanceC2 < 1423) && (directionC2 < 188) && (directionC2 > 172)) || ((distanceC2 < 802) && (directionC2 < 194) && (directionC2 > 166))))
-				{
-					skillToCast = ANTH_TAIL;
-				}
-				else if ((getRandom(100) < 40) && (((distanceC2 < 850) && (directionC2 < 210) && (directionC2 > 150)) || ((distanceC2 < 425) && (directionC2 < 270) && (directionC2 > 90))))
-				{
-					skillToCast = ANTH_DEBUFF;
-				}
-				else if ((getRandom(100) < 10) && (distanceC2 < 1100))
-				{
-					skillToCast = ANTH_JUMP;
-				}
-				else if (getRandom(100) < 10)
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_METEOR;
-				}
-				else if (getRandom(100) < 6)
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_BREATH;
-				}
-				else if (getRandomBoolean())
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_NORM_ATTACK_EX;
-				}
-				else if (getRandom(100) < 5)
-				{
-					castOnTarget = true;
-					skillToCast = getRandomBoolean() ? ANTH_FEAR : ANTH_FEAR_SHORT;
-				}
-				else
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_NORM_ATTACK;
-				}
-			}
-			else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.5))
-			{
-				if ((getRandom(100) < 80) && (((distanceC2 < 1423) && (directionC2 < 188) && (directionC2 > 172)) || ((distanceC2 < 802) && (directionC2 < 194) && (directionC2 > 166))))
-				{
-					skillToCast = ANTH_TAIL;
-				}
-				else if ((getRandom(100) < 40) && (((distanceC2 < 850) && (directionC2 < 210) && (directionC2 > 150)) || ((distanceC2 < 425) && (directionC2 < 270) && (directionC2 > 90))))
-				{
-					skillToCast = ANTH_DEBUFF;
-				}
-				else if ((getRandom(100) < 10) && (distanceC2 < 1100))
-				{
-					skillToCast = ANTH_JUMP;
-				}
-				else if (getRandom(100) < 7)
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_METEOR;
-				}
-				else if (getRandom(100) < 6)
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_BREATH;
-				}
-				else if (getRandomBoolean())
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_NORM_ATTACK_EX;
-				}
-				else if (getRandom(100) < 5)
-				{
-					castOnTarget = true;
-					skillToCast = getRandomBoolean() ? ANTH_FEAR : ANTH_FEAR_SHORT;
-				}
-				else
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_NORM_ATTACK;
-				}
-			}
-			else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.75))
-			{
-				if ((getRandom(100) < 80) && (((distanceC2 < 1423) && (directionC2 < 188) && (directionC2 > 172)) || ((distanceC2 < 802) && (directionC2 < 194) && (directionC2 > 166))))
-				{
-					skillToCast = ANTH_TAIL;
-				}
-				else if ((getRandom(100) < 10) && (distanceC2 < 1100))
-				{
-					skillToCast = ANTH_JUMP;
-				}
-				else if (getRandom(100) < 5)
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_METEOR;
-				}
-				else if (getRandom(100) < 6)
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_BREATH;
-				}
-				else if (getRandomBoolean())
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_NORM_ATTACK_EX;
-				}
-				else if (getRandom(100) < 5)
-				{
-					castOnTarget = true;
-					skillToCast = getRandomBoolean() ? ANTH_FEAR : ANTH_FEAR_SHORT;
-				}
-				else
-				{
-					castOnTarget = true;
-					skillToCast = ANTH_NORM_ATTACK;
-				}
-			}
-			else if ((getRandom(100) < 80) && (((distanceC2 < 1423) && (directionC2 < 188) && (directionC2 > 172)) || ((distanceC2 < 802) && (directionC2 < 194) && (directionC2 > 166))))
-			{
-				skillToCast = ANTH_TAIL;
-			}
-			else if (getRandom(100) < 3)
-			{
-				castOnTarget = true;
-				skillToCast = ANTH_METEOR;
-			}
-			else if (getRandom(100) < 6)
-			{
-				castOnTarget = true;
-				skillToCast = ANTH_BREATH;
-			}
-			else if (getRandomBoolean())
-			{
-				castOnTarget = true;
-				skillToCast = ANTH_NORM_ATTACK_EX;
-			}
-			else if (getRandom(100) < 5)
-			{
-				castOnTarget = true;
-				skillToCast = getRandomBoolean() ? ANTH_FEAR : ANTH_FEAR_SHORT;
-			}
-			else
-			{
-				castOnTarget = true;
-				skillToCast = ANTH_NORM_ATTACK;
-			}
-			
-			if ((skillToCast != null) && SkillCaster.checkUseConditions(npc, skillToCast.getSkill()))
-			{
-				if (castOnTarget)
-				{
-					addSkillCastDesire(npc, c2, skillToCast.getSkill(), 100);
-				}
-				else
-				{
-					npc.getAI().setIntention(CtrlIntention.AI_INTENTION_CAST, skillToCast.getSkill(), npc);
-				}
-			}
-		}
-	}
-	
-	public static void main(String[] args)
-	{
-		new Antharas();
-	}
-}
diff --git dist/game/data/scripts/ai/bosses/Antharas/Antharas.txt dist/game/data/scripts/ai/bosses/Antharas/Antharas.txt
new file mode 100644
index 0000000..9bf351b
--- /dev/null
+++ dist/game/data/scripts/ai/bosses/Antharas/Antharas.txt
@@ -0,0 +1,810 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package ai.bosses.Antharas;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.l2jmobius.Config;
+import org.l2jmobius.commons.util.CommonUtil;
+import org.l2jmobius.gameserver.ai.CtrlIntention;
+import org.l2jmobius.gameserver.enums.MountType;
+import org.l2jmobius.gameserver.instancemanager.ZoneManager;
+import org.l2jmobius.gameserver.model.Location;
+import org.l2jmobius.gameserver.model.World;
+import org.l2jmobius.gameserver.model.actor.Attackable;
+import org.l2jmobius.gameserver.model.actor.Npc;
+import org.l2jmobius.gameserver.model.actor.Player;
+import org.l2jmobius.gameserver.model.holders.SkillHolder;
+import org.l2jmobius.gameserver.model.instancezone.Instance;
+import org.l2jmobius.gameserver.model.skill.Skill;
+import org.l2jmobius.gameserver.model.skill.SkillCaster;
+import org.l2jmobius.gameserver.model.zone.type.NoRestartZone;
+import org.l2jmobius.gameserver.network.NpcStringId;
+import org.l2jmobius.gameserver.network.serverpackets.ExShowScreenMessage;
+import org.l2jmobius.gameserver.network.serverpackets.NpcInfo;
+import org.l2jmobius.gameserver.network.serverpackets.PlaySound;
+import org.l2jmobius.gameserver.network.serverpackets.ServerPacket;
+import org.l2jmobius.gameserver.network.serverpackets.SocialAction;
+import org.l2jmobius.gameserver.network.serverpackets.SpecialCamera;
+
+import instances.AbstractInstance;
+
+/**
+ * Antharas
+ * @author Sero
+ */
+public class Antharas extends AbstractInstance
+{
+	// NPCs
+	private static final int ANTHARAS = 29223; // Antharas
+	private static final int CUBE = 31859; // Teleportation Cubic
+	private static final int GUIDE = 34543;
+	private static final Map<Integer, Location> INVISIBLE_NPC = new HashMap<>();
+	static
+	{
+		INVISIBLE_NPC.put(29077, new Location(177229, 113298, -7735)); // antaras_clear_npc_1
+		INVISIBLE_NPC.put(29078, new Location(176707, 113585, -7735)); // antaras_clear_npc_2
+		INVISIBLE_NPC.put(29079, new Location(176385, 113889, -7735)); // antaras_clear_npc_3
+		INVISIBLE_NPC.put(29080, new Location(176082, 114241, -7735)); // antaras_clear_npc_4
+		INVISIBLE_NPC.put(29081, new Location(176066, 114802, -7735)); // antaras_clear_npc_5
+		INVISIBLE_NPC.put(29082, new Location(176095, 115313, -7735)); // antaras_clear_npc_6
+		INVISIBLE_NPC.put(29083, new Location(176425, 115829, -7735)); // antaras_clear_npc_7
+		INVISIBLE_NPC.put(29084, new Location(176949, 116378, -7735)); // antaras_clear_npc_8
+		INVISIBLE_NPC.put(29085, new Location(177655, 116402, -7735)); // antaras_clear_npc_9
+		INVISIBLE_NPC.put(29086, new Location(178248, 116395, -7735)); // antaras_clear_npc_10
+		INVISIBLE_NPC.put(29087, new Location(178706, 115998, -7735)); // antaras_clear_npc_11
+		INVISIBLE_NPC.put(29088, new Location(179208, 115452, -7735)); // antaras_clear_npc_12
+		INVISIBLE_NPC.put(29089, new Location(179191, 115079, -7735)); // antaras_clear_npc_13
+		INVISIBLE_NPC.put(29090, new Location(179221, 114546, -7735)); // antaras_clear_npc_14
+		INVISIBLE_NPC.put(29091, new Location(178916, 113925, -7735)); // antaras_clear_npc_15
+		INVISIBLE_NPC.put(29092, new Location(178782, 113814, -7735)); // antaras_clear_npc_16
+		INVISIBLE_NPC.put(29093, new Location(178419, 113417, -7735)); // antaras_clear_npc_17
+		INVISIBLE_NPC.put(29094, new Location(177855, 113282, -7735)); // antaras_clear_npc_18
+	}
+	// Skill
+	private static final SkillHolder ANTH_JUMP = new SkillHolder(4106, 1); // Antharas Stun
+	private static final SkillHolder ANTH_TAIL = new SkillHolder(4107, 1); // Antharas Stun
+	private static final SkillHolder ANTH_FEAR = new SkillHolder(4108, 1); // Antharas Terror
+	private static final SkillHolder ANTH_DEBUFF = new SkillHolder(4109, 1); // Curse of Antharas
+	private static final SkillHolder ANTH_MOUTH = new SkillHolder(4110, 2); // Breath Attack
+	private static final SkillHolder ANTH_BREATH = new SkillHolder(4111, 1); // Antharas Fossilization
+	private static final SkillHolder ANTH_NORM_ATTACK = new SkillHolder(4112, 1); // Ordinary Attack
+	private static final SkillHolder ANTH_NORM_ATTACK_EX = new SkillHolder(4113, 1); // Animal doing ordinary attack
+	private static final SkillHolder ANTH_REGEN_1 = new SkillHolder(4125, 1); // Antharas Regeneration
+	private static final SkillHolder ANTH_REGEN_2 = new SkillHolder(4239, 1); // Antharas Regeneration
+	private static final SkillHolder ANTH_REGEN_3 = new SkillHolder(4240, 1); // Antharas Regeneration
+	private static final SkillHolder ANTH_REGEN_4 = new SkillHolder(4241, 1); // Antharas Regeneration
+	private static final SkillHolder DISPEL_BOM = new SkillHolder(5042, 1); // NPC Dispel Bomb
+	private static final SkillHolder ANTH_ANTI_STRIDER = new SkillHolder(4258, 1); // Hinder Strider
+	private static final SkillHolder ANTH_FEAR_SHORT = new SkillHolder(5092, 1); // Antharas Terror
+	private static final SkillHolder ANTH_METEOR = new SkillHolder(5093, 1); // Antharas Meteor
+	// Zone
+	private static final NoRestartZone ZONE = ZoneManager.getInstance().getZoneById(70050, NoRestartZone.class); // Antharas Nest zone
+	// @formatter:on
+	// Reward
+	private static final int REWARD_BOX = 82243;
+	// Misc
+	private static final int TEMPLATE_ID = 304;
+	
+	public Antharas()
+	{
+		super(TEMPLATE_ID);
+		addTalkId(GUIDE, CUBE);
+		addSpawnId(INVISIBLE_NPC.keySet());
+		addSpawnId(ANTHARAS);
+		addSpellFinishedId(ANTHARAS);
+		addAttackId(ANTHARAS);
+		addKillId(ANTHARAS);
+	}
+	
+	@Override
+	public String onEvent(String event, Npc npc, Player player)
+	{
+		switch (event)
+		{
+			case "SPAWN_ANTHARAS":
+			{
+				final Instance world = player.getInstanceWorld();
+				if (world == null)
+				{
+					return null;
+				}
+				
+				final Npc antharas = addSpawn(ANTHARAS, 185708, 114298, -8221, 0, false, 0, false, world.getId());
+				antharas.disableCoreAI(true);
+				antharas.setRandomWalking(false);
+				antharas.teleToLocation(181323, 114850, -7623, 32542);
+				broadcastPacket(world, new PlaySound("BS02_A"));
+				startQuestTimer("CAMERA_1", 23, antharas, null, false);
+				broadcastPacket(world, new NpcInfo(antharas));
+				world.setParameter("antharas", antharas);
+				break;
+			}
+			case "CAMERA_1":
+			{
+				final Instance world = npc.getInstanceWorld();
+				if (world == null)
+				{
+					return null;
+				}
+				
+				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
+				broadcastPacket(world, new SpecialCamera(antharas, 700, 13, -19, 0, 10000, 20000, 0, 0, 0, 0, 0));
+				startQuestTimer("CAMERA_2", 3000, npc, null, false);
+				break;
+			}
+			case "CAMERA_2":
+			{
+				final Instance world = npc.getInstanceWorld();
+				if (world == null)
+				{
+					return null;
+				}
+				
+				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
+				broadcastPacket(world, new SpecialCamera(antharas, 700, 13, 0, 6000, 10000, 20000, 0, 0, 0, 0, 0));
+				startQuestTimer("CAMERA_3", 10000, npc, null, false);
+				break;
+			}
+			case "CAMERA_3":
+			{
+				final Instance world = npc.getInstanceWorld();
+				if (world == null)
+				{
+					return null;
+				}
+				
+				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
+				broadcastPacket(world, new SpecialCamera(antharas, 3700, 0, -3, 0, 10000, 10000, 0, 0, 0, 0, 0));
+				broadcastPacket(world, new SocialAction(antharas.getObjectId(), 1));
+				startQuestTimer("CAMERA_4", 200, npc, null, false);
+				startQuestTimer("SOCIAL", 5200, npc, null, false);
+				break;
+			}
+			case "CAMERA_4":
+			{
+				final Instance world = npc.getInstanceWorld();
+				if (world == null)
+				{
+					return null;
+				}
+				
+				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
+				broadcastPacket(world, new SpecialCamera(antharas, 1100, 0, -3, 22000, 10000, 30000, 0, 0, 0, 0, 0));
+				startQuestTimer("CAMERA_5", 10800, npc, null, false);
+				break;
+			}
+			case "CAMERA_5":
+			{
+				final Instance world = npc.getInstanceWorld();
+				if (world == null)
+				{
+					return null;
+				}
+				
+				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
+				broadcastPacket(world, new SpecialCamera(antharas, 1100, 0, -3, 300, 10000, 7000, 0, 0, 0, 0, 0));
+				startQuestTimer("START_MOVE", 1900, npc, null, false);
+				break;
+			}
+			case "SOCIAL":
+			{
+				final Instance world = npc.getInstanceWorld();
+				if (world == null)
+				{
+					return null;
+				}
+				
+				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
+				broadcastPacket(world, new SocialAction(antharas.getObjectId(), 2));
+				break;
+			}
+			case "START_MOVE":
+			{
+				final Instance world = npc.getInstanceWorld();
+				if (world == null)
+				{
+					return null;
+				}
+				
+				final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
+				antharas.disableCoreAI(false);
+				antharas.setRandomWalking(true);
+				
+				for (Player players : World.getInstance().getVisibleObjectsInRange(npc, Player.class, 4000))
+				{
+					if (players.isHero())
+					{
+						broadcastPacket(world, new ExShowScreenMessage(NpcStringId.S1_YOU_CANNOT_HOPE_TO_DEFEAT_ME_WITH_YOUR_MEAGER_STRENGTH, 2, 4000, players.getName()));
+						break;
+					}
+				}
+				
+				antharas.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, new Location(179011, 114871, -7704));
+				startQuestTimer("CHECK_ATTACK", 60000, antharas, null, false);
+				break;
+			}
+			case "SET_REGEN":
+			{
+				if (npc != null)
+				{
+					if (npc.getCurrentHp() < (npc.getMaxHp() * 0.25))
+					{
+						if (!npc.isAffectedBySkill(ANTH_REGEN_4.getSkillId()))
+						{
+							npc.getAI().setIntention(CtrlIntention.AI_INTENTION_CAST, ANTH_REGEN_4.getSkill(), npc);
+						}
+					}
+					else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.5))
+					{
+						if (!npc.isAffectedBySkill(ANTH_REGEN_3.getSkillId()))
+						{
+							npc.getAI().setIntention(CtrlIntention.AI_INTENTION_CAST, ANTH_REGEN_3.getSkill(), npc);
+						}
+					}
+					else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.75))
+					{
+						if (!npc.isAffectedBySkill(ANTH_REGEN_2.getSkillId()))
+						{
+							npc.getAI().setIntention(CtrlIntention.AI_INTENTION_CAST, ANTH_REGEN_2.getSkill(), npc);
+						}
+					}
+					else if (!npc.isAffectedBySkill(ANTH_REGEN_1.getSkillId()))
+					{
+						npc.getAI().setIntention(CtrlIntention.AI_INTENTION_CAST, ANTH_REGEN_1.getSkill(), npc);
+					}
+					startQuestTimer("SET_REGEN", 60000, npc, player, false);
+				}
+				break;
+			}
+			case "CHECK_ATTACK":
+			{
+				if (npc != null)
+				{
+					final int attacker1hate = npc.getInstanceWorld().getParameters().getInt("attacker1hate", 0);
+					if (attacker1hate > 10)
+					{
+						npc.getInstanceWorld().getParameters().set("attacker1hate", attacker1hate - getRandom(10));
+					}
+					final int attacker2hate = npc.getInstanceWorld().getParameters().getInt("attacker2hate", 0);
+					if (attacker2hate > 10)
+					{
+						npc.getInstanceWorld().getParameters().set("attacker2hate", attacker2hate - getRandom(10));
+					}
+					final int attacker3hate = npc.getInstanceWorld().getParameters().getInt("attacker3hate", 0);
+					if (attacker3hate > 10)
+					{
+						npc.getInstanceWorld().getParameters().set("attacker3hate", attacker3hate - getRandom(10));
+					}
+					manageSkills(npc);
+					startQuestTimer("CHECK_ATTACK", 60000, npc, null, false);
+				}
+				break;
+			}
+			
+			case "TID_USED_FEAR":
+			{
+				if (npc != null)
+				{
+					final int sandStorm = npc.getInstanceWorld().getParameters().getInt("sandStorm", 0);
+					if (sandStorm == 0)
+					{
+						npc.getInstanceWorld().getParameters().set("sandStorm", 1);
+						npc.disableCoreAI(true);
+						npc.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, new Location(177648, 114816, -7735));
+						startQuestTimer("TID_FEAR_MOVE_TIMEOVER", 2000, npc, null);
+						startQuestTimer("TID_FEAR_COOLTIME", 300000, npc, null);
+					}
+				}
+				break;
+			}
+			case "TID_FEAR_COOLTIME":
+			{
+				npc.getInstanceWorld().getParameters().set("sandStorm", 0);
+				break;
+			}
+			case "TID_FEAR_MOVE_TIMEOVER":
+			{
+				final int sandStorm = npc.getInstanceWorld().getParameters().getInt("sandStorm", 0);
+				if ((sandStorm == 1) && (npc.getX() == 177648) && (npc.getY() == 114816))
+				{
+					npc.getInstanceWorld().getParameters().set("sandStorm", 2);
+					npc.getInstanceWorld().getParameters().set("moveChance", 0);
+					npc.disableCoreAI(false);
+					INVISIBLE_NPC.entrySet().forEach(entry -> addSpawn(entry.getKey(), entry.getValue()));
+				}
+				else if (sandStorm == 1)
+				{
+					final int moveChance = npc.getInstanceWorld().getParameters().getInt("moveChance", 0);
+					if (moveChance <= 3)
+					{
+						npc.getInstanceWorld().getParameters().set("moveChance", moveChance + 1);
+						npc.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, new Location(177648, 114816, -7735));
+						startQuestTimer("TID_FEAR_MOVE_TIMEOVER", 5000, npc, null);
+					}
+					else
+					{
+						npc.teleToLocation(177648, 114816, -7735, npc.getHeading());
+						startQuestTimer("TID_FEAR_MOVE_TIMEOVER", 1000, npc, null);
+					}
+				}
+				break;
+			}
+			case "MANAGE_SKILL":
+			{
+				manageSkills(npc);
+				break;
+			}
+		}
+		return null;
+	}
+	
+	@Override
+	public String onAggroRangeEnter(Npc npc, Player player, boolean isSummon)
+	{
+		npc.doCast(DISPEL_BOM.getSkill());
+		npc.doDie(player);
+		return super.onAggroRangeEnter(npc, player, isSummon);
+	}
+	
+	@Override
+	public String onAttack(Npc npc, Player attacker, int damage, boolean isSummon, Skill skill)
+	{
+		if (npc.getId() == ANTHARAS)
+		{
+			if (!ZONE.isCharacterInZone(attacker))
+			{
+				LOGGER.warning(getClass().getSimpleName() + ": Player " + attacker.getName() + " attacked Antharas in invalid conditions!");
+				attacker.teleToLocation(80464, 152294, -3534);
+			}
+			
+			if ((attacker.getMountType() == MountType.STRIDER) && !attacker.isAffectedBySkill(ANTH_ANTI_STRIDER.getSkillId()) && SkillCaster.checkUseConditions(npc, ANTH_ANTI_STRIDER.getSkill()))
+			{
+				addSkillCastDesire(npc, attacker, ANTH_ANTI_STRIDER.getSkill(), 100);
+			}
+			
+			if (skill == null)
+			{
+				refreshAiParams(attacker, damage * 1000);
+			}
+			else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.25))
+			{
+				refreshAiParams(attacker, (damage / 3) * 100);
+			}
+			else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.5))
+			{
+				refreshAiParams(attacker, damage * 20);
+			}
+			else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.75))
+			{
+				refreshAiParams(attacker, damage * 10);
+			}
+			else
+			{
+				refreshAiParams(attacker, (damage / 3) * 20);
+			}
+			manageSkills(npc);
+		}
+		return super.onAttack(npc, attacker, damage, isSummon, skill);
+	}
+	
+	@Override
+	public String onKill(Npc npc, Player killer, boolean isSummon)
+	{
+		final Instance world = killer.getInstanceWorld();
+		final Npc antharas = world.getParameters().getObject("antharas", Npc.class);
+		if (ZONE.isCharacterInZone(killer) && (npc.getId() == ANTHARAS))
+		{
+			notifyEvent("DESPAWN_MINIONS", null, null);
+			ZONE.broadcastPacket(new SpecialCamera(antharas, 1200, 20, -10, 0, 10000, 13000, 0, 0, 0, 0, 0));
+			ZONE.broadcastPacket(new PlaySound("BS01_D"));
+			
+			// After defeating Antharas all players in the zone receive Antharas' Reward Pack.
+			for (Player player : world.getPlayers())
+			{
+				giveItems(player, REWARD_BOX, 1);
+			}
+			
+			world.finishInstance();
+		}
+		return super.onKill(npc, killer, isSummon);
+	}
+	
+	@Override
+	public void onMoveFinished(Npc npc)
+	{
+		npc.doCast(DISPEL_BOM.getSkill());
+		npc.doDie(null);
+	}
+	
+	@Override
+	public String onSpawn(Npc npc)
+	{
+		if (npc.getId() == ANTHARAS)
+		{
+			((Attackable) npc).setCanReturnToSpawnPoint(false);
+			npc.setRandomWalking(false);
+			cancelQuestTimer("SET_REGEN", npc, null);
+			startQuestTimer("SET_REGEN", 60000, npc, null);
+		}
+		return super.onSpawn(npc);
+	}
+	
+	@Override
+	public String onSpellFinished(Npc npc, Player player, Skill skill)
+	{
+		if ((skill.getId() == ANTH_FEAR.getSkillId()) || (skill.getId() == ANTH_FEAR_SHORT.getSkillId()))
+		{
+			startQuestTimer("TID_USED_FEAR", 7000, npc, null);
+		}
+		startQuestTimer("MANAGE_SKILL", 1000, npc, null);
+		return super.onSpellFinished(npc, player, skill);
+	}
+	
+	private void refreshAiParams(Player attacker, int damage)
+	{
+		final Instance world = attacker.getInstanceWorld();
+		if (world == null)
+		{
+			return;
+		}
+		
+		final Player attacker1 = world.getParameters().getObject("attacker1", Player.class);
+		final Player attacker2 = world.getParameters().getObject("attacker2", Player.class);
+		final Player attacker3 = world.getParameters().getObject("attacker3", Player.class);
+		final int attacker1hate = world.getParameters().getInt("attacker1hate", 0);
+		final int attacker2hate = world.getParameters().getInt("attacker2hate", 0);
+		final int attacker3hate = world.getParameters().getInt("attacker3hate", 0);
+		
+		if ((attacker1 != null) && (attacker == attacker1))
+		{
+			if (attacker1hate < (damage + 1000))
+			{
+				world.getParameters().set("attacker1hate", damage + getRandom(3000));
+			}
+		}
+		else if ((attacker2 != null) && (attacker == attacker2))
+		{
+			if (attacker2hate < (damage + 1000))
+			{
+				world.getParameters().set("attacker2hate", damage + getRandom(3000));
+			}
+		}
+		else if ((attacker3 != null) && (attacker == attacker3))
+		{
+			if (attacker3hate < (damage + 1000))
+			{
+				world.getParameters().set("attacker3hate", damage + getRandom(3000));
+			}
+		}
+		else
+		{
+			final int i1 = CommonUtil.min(attacker1hate, attacker2hate, attacker3hate);
+			if (attacker1hate == i1)
+			{
+				world.getParameters().set("attacker1hate", damage + getRandom(3000));
+				attacker.getInstanceWorld().getParameters().set("attacker1", attacker);
+			}
+			else if (attacker2hate == i1)
+			{
+				world.getParameters().set("attacker2hate", damage + getRandom(3000));
+				attacker.getInstanceWorld().getParameters().set("attacker2", attacker);
+			}
+			else if (attacker3hate == i1)
+			{
+				world.getParameters().set("attacker3hate", damage + getRandom(3000));
+				attacker.getInstanceWorld().getParameters().set("attacker3", attacker);
+			}
+		}
+	}
+	
+	@Override
+	public String onTalk(Npc npc, Player player)
+	{
+		if (npc.getId() == GUIDE)
+		{
+			enterInstance(player, npc, TEMPLATE_ID);
+			Instance world = player.getInstanceWorld();
+			if ((world != null) && world.isStatus(0))
+			{
+				world.setStatus(1);
+				startQuestTimer("SPAWN_ANTHARAS", Config.ANTHARAS_WAIT_TIME * 60000, null, player);
+			}
+		}
+		else // Teleport Cube
+		{
+			Instance world = player.getInstanceWorld();
+			if (world != null)
+			{
+				teleportPlayerOut(player, world);
+			}
+		}
+		return null;
+	}
+	
+	private void broadcastPacket(Instance world, ServerPacket packet)
+	{
+		for (Player player : world.getPlayers())
+		{
+			if ((player != null) && player.isOnline())
+			{
+				player.sendPacket(packet);
+			}
+		}
+	}
+	
+	private void manageSkills(Npc npc)
+	{
+		if (npc.isCastingNow() || npc.isCoreAIDisabled() || !npc.isInCombat())
+		{
+			return;
+		}
+		
+		final Instance world = npc.getInstanceWorld();
+		if (world == null)
+		{
+			return;
+		}
+		
+		int i1 = 0;
+		int i2 = 0;
+		Player c2 = null;
+		final Player attacker1 = world.getParameters().getObject("attacker1", Player.class);
+		int attacker1hate = world.getParameters().getInt("attacker1hate", 0);
+		if ((attacker1 == null) || (npc.calculateDistance3D(attacker1) > 9000) || attacker1.isDead())
+		{
+			attacker1hate = 0;
+			world.getParameters().set("attacker1hate", attacker1hate);
+		}
+		
+		final Player attacker2 = world.getParameters().getObject("attacker2", Player.class);
+		int attacker2hate = world.getParameters().getInt("attacker2hate", 0);
+		if ((attacker2 == null) || (npc.calculateDistance3D(attacker2) > 9000) || attacker2.isDead())
+		{
+			attacker2hate = 0;
+			world.getParameters().set("attacker2hate", attacker2hate);
+		}
+		
+		final Player attacker3 = world.getParameters().getObject("attacker3", Player.class);
+		int attacker3hate = world.getParameters().getInt("attacker3hate", 0);
+		if ((attacker3 == null) || (npc.calculateDistance3D(attacker3) > 9000) || attacker3.isDead())
+		{
+			attacker3hate = 0;
+			world.getParameters().set("attacker3hate", attacker3hate);
+		}
+		
+		if (attacker1hate > attacker2hate)
+		{
+			i1 = 2;
+			i2 = attacker1hate;
+			c2 = attacker1;
+		}
+		else if (attacker2hate > 0)
+		{
+			i1 = 3;
+			i2 = attacker2hate;
+			c2 = attacker2;
+		}
+		
+		if (attacker3hate > i2)
+		{
+			i1 = 4;
+			i2 = attacker3hate;
+			c2 = attacker3;
+		}
+		if (i2 > 0)
+		{
+			if (getRandom(100) < 70)
+			{
+				switch (i1)
+				{
+					case 2:
+					{
+						attacker1hate = 500;
+						world.getParameters().set("attacker1hate", attacker1hate);
+						break;
+					}
+					case 3:
+					{
+						attacker2hate = 500;
+						world.getParameters().set("attacker1hate", attacker2hate);
+						break;
+					}
+					case 4:
+					{
+						attacker3hate = 500;
+						world.getParameters().set("attacker1hate", attacker3hate);
+						break;
+					}
+				}
+			}
+			
+			final double distanceC2 = npc.calculateDistance3D(c2);
+			final double directionC2 = npc.calculateDirectionTo(c2);
+			SkillHolder skillToCast = null;
+			boolean castOnTarget = false;
+			if (npc.getCurrentHp() < (npc.getMaxHp() * 0.25))
+			{
+				if (getRandom(100) < 30)
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_MOUTH;
+				}
+				else if ((getRandom(100) < 80) && (((distanceC2 < 1423) && (directionC2 < 188) && (directionC2 > 172)) || ((distanceC2 < 802) && (directionC2 < 194) && (directionC2 > 166))))
+				{
+					skillToCast = ANTH_TAIL;
+				}
+				else if ((getRandom(100) < 40) && (((distanceC2 < 850) && (directionC2 < 210) && (directionC2 > 150)) || ((distanceC2 < 425) && (directionC2 < 270) && (directionC2 > 90))))
+				{
+					skillToCast = ANTH_DEBUFF;
+				}
+				else if ((getRandom(100) < 10) && (distanceC2 < 1100))
+				{
+					skillToCast = ANTH_JUMP;
+				}
+				else if (getRandom(100) < 10)
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_METEOR;
+				}
+				else if (getRandom(100) < 6)
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_BREATH;
+				}
+				else if (getRandomBoolean())
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_NORM_ATTACK_EX;
+				}
+				else if (getRandom(100) < 5)
+				{
+					castOnTarget = true;
+					skillToCast = getRandomBoolean() ? ANTH_FEAR : ANTH_FEAR_SHORT;
+				}
+				else
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_NORM_ATTACK;
+				}
+			}
+			else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.5))
+			{
+				if ((getRandom(100) < 80) && (((distanceC2 < 1423) && (directionC2 < 188) && (directionC2 > 172)) || ((distanceC2 < 802) && (directionC2 < 194) && (directionC2 > 166))))
+				{
+					skillToCast = ANTH_TAIL;
+				}
+				else if ((getRandom(100) < 40) && (((distanceC2 < 850) && (directionC2 < 210) && (directionC2 > 150)) || ((distanceC2 < 425) && (directionC2 < 270) && (directionC2 > 90))))
+				{
+					skillToCast = ANTH_DEBUFF;
+				}
+				else if ((getRandom(100) < 10) && (distanceC2 < 1100))
+				{
+					skillToCast = ANTH_JUMP;
+				}
+				else if (getRandom(100) < 7)
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_METEOR;
+				}
+				else if (getRandom(100) < 6)
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_BREATH;
+				}
+				else if (getRandomBoolean())
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_NORM_ATTACK_EX;
+				}
+				else if (getRandom(100) < 5)
+				{
+					castOnTarget = true;
+					skillToCast = getRandomBoolean() ? ANTH_FEAR : ANTH_FEAR_SHORT;
+				}
+				else
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_NORM_ATTACK;
+				}
+			}
+			else if (npc.getCurrentHp() < (npc.getMaxHp() * 0.75))
+			{
+				if ((getRandom(100) < 80) && (((distanceC2 < 1423) && (directionC2 < 188) && (directionC2 > 172)) || ((distanceC2 < 802) && (directionC2 < 194) && (directionC2 > 166))))
+				{
+					skillToCast = ANTH_TAIL;
+				}
+				else if ((getRandom(100) < 10) && (distanceC2 < 1100))
+				{
+					skillToCast = ANTH_JUMP;
+				}
+				else if (getRandom(100) < 5)
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_METEOR;
+				}
+				else if (getRandom(100) < 6)
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_BREATH;
+				}
+				else if (getRandomBoolean())
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_NORM_ATTACK_EX;
+				}
+				else if (getRandom(100) < 5)
+				{
+					castOnTarget = true;
+					skillToCast = getRandomBoolean() ? ANTH_FEAR : ANTH_FEAR_SHORT;
+				}
+				else
+				{
+					castOnTarget = true;
+					skillToCast = ANTH_NORM_ATTACK;
+				}
+			}
+			else if ((getRandom(100) < 80) && (((distanceC2 < 1423) && (directionC2 < 188) && (directionC2 > 172)) || ((distanceC2 < 802) && (directionC2 < 194) && (directionC2 > 166))))
+			{
+				skillToCast = ANTH_TAIL;
+			}
+			else if (getRandom(100) < 3)
+			{
+				castOnTarget = true;
+				skillToCast = ANTH_METEOR;
+			}
+			else if (getRandom(100) < 6)
+			{
+				castOnTarget = true;
+				skillToCast = ANTH_BREATH;
+			}
+			else if (getRandomBoolean())
+			{
+				castOnTarget = true;
+				skillToCast = ANTH_NORM_ATTACK_EX;
+			}
+			else if (getRandom(100) < 5)
+			{
+				castOnTarget = true;
+				skillToCast = getRandomBoolean() ? ANTH_FEAR : ANTH_FEAR_SHORT;
+			}
+			else
+			{
+				castOnTarget = true;
+				skillToCast = ANTH_NORM_ATTACK;
+			}
+			
+			if ((skillToCast != null) && SkillCaster.checkUseConditions(npc, skillToCast.getSkill()))
+			{
+				if (castOnTarget)
+				{
+					addSkillCastDesire(npc, c2, skillToCast.getSkill(), 100);
+				}
+				else
+				{
+					npc.getAI().setIntention(CtrlIntention.AI_INTENTION_CAST, skillToCast.getSkill(), npc);
+				}
+			}
+		}
+	}
+	
+	public static void main(String[] args)
+	{
+		new Antharas();
+	}
+}
diff --git dist/game/data/scripts/ai/bosses/Antharas/ReadMeFightAntharas.txt dist/game/data/scripts/ai/bosses/Antharas/ReadMeFightAntharas.txt
new file mode 100644
index 0000000..e506137
--- /dev/null
+++ dist/game/data/scripts/ai/bosses/Antharas/ReadMeFightAntharas.txt
@@ -0,0 +1,29 @@
+To reactivate ancient antharas it is necessary to rename antharas.txt for antharas.java
+Game/Data/Scripts/Ai/Bosses/Antharas/
+
+For the area site to work, you need to rename the antharas.txt file for antharas.xml
+Game/Data/Instances/Bosses
+
+To enter the old antharas you must modify the call to enter the ID NPC '34543'.
+Excerpt:
+<Button align = left icon = "normal" action = "bypass -h npc_%Objectid%_Quest fightantharas"> fight antharas </button>
+To:
+<Button align = left icon = "normal" action = "bypass -h npc_%Objectid%_Quest antharas"> fight antharas </thton>
+
+It is not advisable to use the scripts Fightantharas and Antharas, can generate conflicts, the generation of the old antharas can happen during Fightantharas.
+Take your test before you put it live.
+
+ --- FightAntharas.java ---
+
+Fightantharas:
+Antharas is summed in the middle of the scenario.
+With 75% of HP the Symbol are summed, and a buff is added to antharas that recover HP to the top.
+Symbols need to be destroyed to the buff will be removed from the antharas.
+In 50% of the HP of Antharas, 2 clones are summed, they have the same skills as Instance's original antharas.
+15% of antharas HP, Symbols reappear by adding the buff to recover HP at the top. Players need to destroy all Symbols before Life do Boss recovers completely.
+Overdue antharas, all players receive a box containing a random item.
+
+Observations:
+1. Any player can leave Instance and return while Antharas is in battle. This also works if the player has a DiscoNeCTe. The player reappears in the city.
+2. Instance is completed if all players leave.
+3. Unconnected Player can return to Instance while the battle is happening, no party to 'reentry'.
\ No newline at end of file
diff --git dist/game/data/scripts/ai/bosses/FightAntharas/FightAntharas.java dist/game/data/scripts/ai/bosses/FightAntharas/FightAntharas.java
new file mode 100644
index 0000000..a6e84d3
--- /dev/null
+++ dist/game/data/scripts/ai/bosses/FightAntharas/FightAntharas.java
@@ -0,0 +1,471 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package ai.bosses.FightAntharas;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.l2jmobius.gameserver.ai.CtrlIntention;
+import org.l2jmobius.gameserver.enums.ChatType;
+import org.l2jmobius.gameserver.model.World;
+import org.l2jmobius.gameserver.model.actor.Npc;
+import org.l2jmobius.gameserver.model.actor.Player;
+import org.l2jmobius.gameserver.model.holders.SkillHolder;
+import org.l2jmobius.gameserver.model.instancezone.Instance;
+import org.l2jmobius.gameserver.model.skill.Skill;
+import org.l2jmobius.gameserver.model.skill.SkillCaster;
+import org.l2jmobius.gameserver.network.serverpackets.NpcInfo;
+import org.l2jmobius.gameserver.util.Util;
+
+import instances.AbstractInstance;
+
+/**
+ * @author Notorion
+ */
+public class FightAntharas extends AbstractInstance
+{
+	// NPCs
+	private static final int FIGHT_ANTHARAS = 29387;
+	private static final int GUIDE = 34543;
+	private static final int ANTHARAS_SYMBOL = 29390;
+	private static final int CLONE_FIGHT_ANTHARAS = 29388;
+	// Skill Summon Antharas' Avatar
+	private static final int CLONE_EFFECT_SKILL = 34312;
+	// Skills
+	private static final int ATTACK_SKILL_ID = 34309;
+	private static final SkillHolder ATTACK_SKILL = new SkillHolder(ATTACK_SKILL_ID, 1);
+	// Buff Antharas' Earth Guard
+	private static final int BUFF_ID = 34315;
+	// Reward
+	private static final int BELLRA_GREEN_CHEST = 82939;
+	private static final int REWARD_COUNT = 1;
+	// Timer
+	private static final long CHECK_SYMBOL_INTERVAL = 1000; // 1 segundo
+	private boolean buffApplied = false;
+	private static final String INSTANCE_COMPLETED = "instance_completed";
+	// Locations AntharasSymbol
+	private static final int[][] SYMBOL_LOCATIONS_1 =
+	{
+		{
+			179139,
+			114105,
+			-7733
+		},
+		{
+			178689,
+			115892,
+			-7735
+		},
+		{
+			177087,
+			114858,
+			-7735
+		},
+		{
+			177628,
+			113408,
+			-7735
+		}
+	};
+	
+	private static final int[][] SYMBOL_LOCATIONS_2 =
+	{
+		{
+			179704,
+			114883,
+			-7734
+		},
+		{
+			178883,
+			113364,
+			-7733
+		},
+		{
+			178688,
+			116260,
+			-7733
+		},
+		{
+			177518,
+			114862,
+			-7733
+		}
+	};
+	
+	private static final int[] BOSS_SPAWN_LOC =
+	{
+		178684,
+		114619,
+		-7733
+	};
+	
+	private static final int[] CLONE_SPAWN_LOC =
+	{
+		178454,
+		114819,
+		-7735
+	};
+	
+	// Control flags
+	private boolean symbolsSpawned15 = false; // Flag Control HP 15%
+	private boolean clonesSpawned = false;
+	private boolean firstSymbolsSpawned = false; // Flag 1 symbols
+	private boolean secondSymbolsSpawned = false; // Flag 2 symbols
+	// Misc
+	private static final int TEMPLATE_ID = 316;
+	private static final long SYMBOL_RESPAWN_DELAY = 5000; // 15 seconds
+	private static final long BOSS_SPAWN_DELAY = 5000; // 5 seconds
+	private final List<Npc> _symbols = new ArrayList<>();
+	
+	public FightAntharas()
+	{
+		super(TEMPLATE_ID);
+		addTalkId(GUIDE);
+		addSpawnId(FIGHT_ANTHARAS);
+		addKillId(FIGHT_ANTHARAS);
+		addKillId(ANTHARAS_SYMBOL);
+		addKillId(CLONE_FIGHT_ANTHARAS);
+		addInstanceEnterId(TEMPLATE_ID);
+		addSpawnId(ANTHARAS_SYMBOL);
+	}
+	
+	@Override
+	protected void onEnter(Player player, Instance instance, boolean firstEnter)
+	{
+		super.onEnter(player, instance, firstEnter);
+		if (instance.getParameters().getBoolean(INSTANCE_COMPLETED, false))
+		{
+			return;
+		}
+		if (firstEnter)
+		{
+			startQuestTimer("check_symbols", CHECK_SYMBOL_INTERVAL, null, null);
+		}
+		Npc fightAntharas = instance.getParameters().getObject("fightAntharas", Npc.class);
+		if ((fightAntharas != null) && fightAntharas.isSpawned())
+		{
+			player.sendPacket(new NpcInfo(fightAntharas));
+		}
+	}
+	
+	@Override
+	public String onSpawn(Npc npc)
+	{
+		final Instance world = npc.getInstanceWorld();
+		if (world != null)
+		{
+			if (npc.getId() == ANTHARAS_SYMBOL)
+			{
+				// Timer buff Antharas
+				startQuestTimer("add_symbol_buff", 10000, npc, null);
+				checkSymbols(world);
+			}
+		}
+		return super.onSpawn(npc);
+	}
+	
+	@Override
+	public String onEvent(String event, Npc npc, Player player)
+	{
+		Instance world = npc != null ? npc.getInstanceWorld() : player != null ? player.getInstanceWorld() : null;
+		
+		if (world != null)
+		{
+			switch (event)
+			{
+				case "antharas_attack":
+				{
+					if ((npc != null) && !npc.isDead())
+					{
+						List<Player> playersInRange = World.getInstance().getVisibleObjectsInRange(npc, Player.class, 4000);
+						playersInRange.removeIf(p -> !Util.checkIfInRange(1000, npc, p, true));
+						Player target = playersInRange.isEmpty() ? null : playersInRange.get(getRandom(playersInRange.size()));
+						
+						if (target != null)
+						{
+							npc.getAI().setIntention(CtrlIntention.AI_INTENTION_CAST, ATTACK_SKILL.getSkill(), target);
+						}
+					}
+					break;
+				}
+				case "check_symbols":
+					checkSymbols(world);
+					break;
+				case "spawn_fight_antharas":
+				{
+					final Npc fightAntharas = addSpawn(FIGHT_ANTHARAS, BOSS_SPAWN_LOC[0], BOSS_SPAWN_LOC[1], BOSS_SPAWN_LOC[2], 0, false, 0, false, world.getId());
+					fightAntharas.setRandomWalking(false);
+					world.setParameter("fightAntharas", fightAntharas);
+					startQuestTimer("check_antharas_hp", 5000, fightAntharas, null, true);
+					broadcastPacket(world, new NpcInfo(fightAntharas));
+					break;
+				}
+				
+				case "check_antharas_hp":
+				{
+					checkBossHP(npc, world);
+					break;
+				}
+				case "spawn_clones":
+				{
+					for (int i = 0; i < 2; i++)
+					{
+						Npc clone = addSpawn(CLONE_FIGHT_ANTHARAS, CLONE_SPAWN_LOC[0], CLONE_SPAWN_LOC[1], CLONE_SPAWN_LOC[2], 0, false, 0, false, world.getId());
+						if (clone != null)
+						{
+							SkillHolder skillHolder = new SkillHolder(CLONE_EFFECT_SKILL, 1);
+							Skill skill = skillHolder.getSkill();
+							if (skill != null)
+							{
+								SkillCaster.triggerCast(clone, clone, skill);
+							}
+						}
+					}
+					if (npc != null)
+					{
+						npc.broadcastSay(ChatType.NPC_GENERAL, "Not bad, I can show you my abilities. My clones will show you my true power.");
+					}
+					
+					break;
+				}
+			}
+		}
+		
+		if (event.startsWith("respawn_symbol_") && (world != null))
+		{
+			String[] parts = event.split("_");
+			int index = Integer.parseInt(parts[2]);
+			int[] loc = SYMBOL_LOCATIONS_1[index];
+			
+			String paramKey = "symbol_respawned_" + index;
+			if (!world.getParameters().getBoolean(paramKey, false))
+			{
+				addSpawn(ANTHARAS_SYMBOL, loc[0], loc[1], loc[2], 0, false, 0, false, world.getId());
+				world.setParameter(paramKey, true);
+			}
+		}
+		return super.onEvent(event, npc, player);
+	}
+	
+	private void checkBossHP(Npc mainBoss, Instance world)
+	{
+		if ((mainBoss != null) && !mainBoss.isDead())
+		{
+			double currentHP = mainBoss.getCurrentHp();
+			int maxHP = mainBoss.getMaxHp();
+			int currentHPPercentage = (int) ((currentHP / maxHP) * 100);
+			
+			if ((currentHPPercentage <= 75) && !firstSymbolsSpawned)
+			{
+				firstSymbolsSpawned = true;
+				
+				for (int[] loc : SYMBOL_LOCATIONS_1)
+				{
+					Npc symbol = addSpawn(ANTHARAS_SYMBOL, loc[0], loc[1], loc[2], 0, false, 0, false, world.getId());
+					_symbols.add(symbol);
+				}
+				world.setParameter("symbols_spawned", true);
+				mainBoss.broadcastSay(ChatType.NPC_GENERAL, "It's been a while since I face worthy adversaries. I'll show you my power. I will receive the power of the earth once again.");
+			}
+			if ((currentHPPercentage <= 15) && !symbolsSpawned15)
+			{
+				symbolsSpawned15 = true;
+				
+				for (int[] loc : SYMBOL_LOCATIONS_2)
+				{
+					Npc symbol = addSpawn(ANTHARAS_SYMBOL, loc[0], loc[1], loc[2], 0, false, 0, false, world.getId());
+					_symbols.add(symbol);
+				}
+				world.setParameter("symbols_spawned", true);
+				mainBoss.broadcastSay(ChatType.NPC_GENERAL, "It's been a while since I face worthy adversaries. I'll show you my power. I will receive the power of the earth once again.");
+			}
+			checkSymbols(world);
+			if ((currentHPPercentage <= 50) && !clonesSpawned)
+			{
+				clonesSpawned = true;
+				startQuestTimer("spawn_clones", 100, mainBoss, null);
+				world.setParameter("clones_spawned", true);
+			}
+		}
+	}
+	
+	private void checkSymbols(Instance world)
+	{
+		boolean symbolsAlive = false;
+		for (int[] loc : SYMBOL_LOCATIONS_1)
+		{
+			Npc symbol = world.getNpc(ANTHARAS_SYMBOL);
+			if ((symbol != null) && !symbol.isDead() && (symbol.getX() == loc[0]) && (symbol.getY() == loc[1]) && (symbol.getZ() == loc[2]))
+			{
+				symbolsAlive = true;
+				break;
+			}
+		}
+		
+		for (int[] loc : SYMBOL_LOCATIONS_2)
+		{
+			Npc symbol = world.getNpc(ANTHARAS_SYMBOL);
+			if ((symbol != null) && !symbol.isDead() && (symbol.getX() == loc[0]) && (symbol.getY() == loc[1]) && (symbol.getZ() == loc[2]))
+			{
+				symbolsAlive = true;
+				break;
+			}
+		}
+		
+		Npc fightAntharas = world.getNpc(FIGHT_ANTHARAS);
+		if (fightAntharas != null)
+		{
+			if (symbolsAlive)
+			{
+				if (!buffApplied)
+				{
+					Skill skill = new SkillHolder(BUFF_ID, 1).getSkill();
+					if (skill != null)
+					{
+						SkillCaster.triggerCast(fightAntharas, fightAntharas, skill);
+						buffApplied = true;
+					}
+				}
+			}
+			else
+			{
+				if (buffApplied)
+				{
+					fightAntharas.getEffectList().stopSkillEffects(null, BUFF_ID);
+					buffApplied = false;
+				}
+			}
+		}
+	}
+	
+	@Override
+	public String onKill(Npc npc, Player killer, boolean isSummon)
+	{
+		final Instance world = npc.getInstanceWorld();
+		if (world == null)
+		{
+			return null;
+		}
+		
+		if (npc.getId() == ANTHARAS_SYMBOL)
+		{
+			for (int i = 0; i < SYMBOL_LOCATIONS_1.length; i++)
+			{
+				int[] loc = SYMBOL_LOCATIONS_1[i];
+				if ((npc.getX() == loc[0]) && (npc.getY() == loc[1]) && (npc.getZ() == loc[2]))
+				{
+					startQuestTimer("respawn_symbol_" + i, SYMBOL_RESPAWN_DELAY, null, null);
+					break;
+				}
+			}
+			_symbols.remove(npc);
+			if (_symbols.isEmpty() && firstSymbolsSpawned && !secondSymbolsSpawned)
+			{
+				for (int[] loc : SYMBOL_LOCATIONS_2)
+				{
+					Npc symbol = addSpawn(ANTHARAS_SYMBOL, loc[0], loc[1], loc[2], 0, false, 0, false, world.getId());
+					_symbols.add(symbol);
+				}
+				
+				secondSymbolsSpawned = true;
+			}
+			
+			if (_symbols.isEmpty())
+			{
+				Npc fightAntharas = world.getNpc(FIGHT_ANTHARAS);
+				if (fightAntharas != null)
+				{
+					fightAntharas.broadcastSay(ChatType.NPC_GENERAL, "All my symbols were destroyed!");
+				}
+				if ((fightAntharas != null) && buffApplied)
+				{
+					fightAntharas.getEffectList().stopSkillEffects(null, BUFF_ID);
+					buffApplied = false;
+				}
+			}
+		}
+		else if (npc.getId() == FIGHT_ANTHARAS)
+		{
+			world.getParameters().set(INSTANCE_COMPLETED, true);
+			for (Player player : world.getPlayers())
+			{
+				if ((player != null) && player.isOnline())
+				{
+					player.addItem("FightAntharas Reward", BELLRA_GREEN_CHEST, REWARD_COUNT, player, true);
+				}
+			}
+			for (Npc symbol : world.getNpcs(ANTHARAS_SYMBOL))
+			{
+				symbol.deleteMe();
+			}
+			for (Npc clone : world.getNpcs(CLONE_FIGHT_ANTHARAS))
+			{
+				clone.deleteMe();
+			}
+			
+			cancelQuestTimers("check_antharas_hp");
+			world.getParameters().remove("fightAntharas");
+			symbolsSpawned15 = false;
+			clonesSpawned = false;
+			firstSymbolsSpawned = false;
+			secondSymbolsSpawned = false;
+			cancelQuestTimers("antharas_attack");
+		}
+		return super.onKill(npc, killer, isSummon);
+	}
+	
+	@Override
+	public String onTalk(Npc npc, Player player)
+	{
+		if (npc.getId() == GUIDE)
+		{
+			enterInstance(player, npc, TEMPLATE_ID);
+			
+			Instance world = player.getInstanceWorld();
+			if (world != null)
+			{
+				if (world.getParameters().getBoolean(INSTANCE_COMPLETED, false))
+				{
+					return super.onTalk(npc, player);
+				}
+				Npc fightAntharas = world.getParameters().getObject("fightAntharas", Npc.class);
+				if ((fightAntharas == null) || !fightAntharas.isSpawned())
+				{
+					startQuestTimer("spawn_fight_antharas", BOSS_SPAWN_DELAY, null, player);
+					world.setParameter("bossSpawned", true);
+				}
+			}
+		}
+		return super.onTalk(npc, player);
+	}
+	
+	private void broadcastPacket(Instance world, NpcInfo npcInfo)
+	{
+		for (Player player : world.getPlayers())
+		{
+			if ((player != null) && player.isOnline())
+			{
+				player.sendPacket(npcInfo);
+			}
+		}
+	}
+	
+	public static void main(String[] args)
+	{
+		new FightAntharas();
+	}
+}
\ No newline at end of file
diff --git dist/game/data/scripts/ai/bosses/FightAntharas/ReadMeFightAntharas.txt dist/game/data/scripts/ai/bosses/FightAntharas/ReadMeFightAntharas.txt
new file mode 100644
index 0000000..e506137
--- /dev/null
+++ dist/game/data/scripts/ai/bosses/FightAntharas/ReadMeFightAntharas.txt
@@ -0,0 +1,29 @@
+To reactivate ancient antharas it is necessary to rename antharas.txt for antharas.java
+Game/Data/Scripts/Ai/Bosses/Antharas/
+
+For the area site to work, you need to rename the antharas.txt file for antharas.xml
+Game/Data/Instances/Bosses
+
+To enter the old antharas you must modify the call to enter the ID NPC '34543'.
+Excerpt:
+<Button align = left icon = "normal" action = "bypass -h npc_%Objectid%_Quest fightantharas"> fight antharas </button>
+To:
+<Button align = left icon = "normal" action = "bypass -h npc_%Objectid%_Quest antharas"> fight antharas </thton>
+
+It is not advisable to use the scripts Fightantharas and Antharas, can generate conflicts, the generation of the old antharas can happen during Fightantharas.
+Take your test before you put it live.
+
+ --- FightAntharas.java ---
+
+Fightantharas:
+Antharas is summed in the middle of the scenario.
+With 75% of HP the Symbol are summed, and a buff is added to antharas that recover HP to the top.
+Symbols need to be destroyed to the buff will be removed from the antharas.
+In 50% of the HP of Antharas, 2 clones are summed, they have the same skills as Instance's original antharas.
+15% of antharas HP, Symbols reappear by adding the buff to recover HP at the top. Players need to destroy all Symbols before Life do Boss recovers completely.
+Overdue antharas, all players receive a box containing a random item.
+
+Observations:
+1. Any player can leave Instance and return while Antharas is in battle. This also works if the player has a DiscoNeCTe. The player reappears in the city.
+2. Instance is completed if all players leave.
+3. Unconnected Player can return to Instance while the battle is happening, no party to 'reentry'.
\ No newline at end of file
diff --git dist/game/data/scripts/ai/bosses/FightAntharas/condNoParty.html dist/game/data/scripts/ai/bosses/FightAntharas/condNoParty.html
new file mode 100644
index 0000000..3bceb8b
--- /dev/null
+++ dist/game/data/scripts/ai/bosses/FightAntharas/condNoParty.html
@@ -0,0 +1,3 @@
+<html><body>Bellra:<br>
+You must be in a party to enter.
+</body></html>
\ No newline at end of file
diff --git dist/game/data/scripts/ai/bosses/FightAntharas/condNoPartyLeader.html dist/game/data/scripts/ai/bosses/FightAntharas/condNoPartyLeader.html
new file mode 100644
index 0000000..34420de
--- /dev/null
+++ dist/game/data/scripts/ai/bosses/FightAntharas/condNoPartyLeader.html
@@ -0,0 +1,3 @@
+<html><body>Bellra:<br>
+The leader of the party should try to enter.
+</body></html>
\ No newline at end of file
diff --git dist/game/data/stats/npcs/29300-29399.xml dist/game/data/stats/npcs/29300-29399.xml
index a07a797..f11045c 100644
--- dist/game/data/stats/npcs/29300-29399.xml
+++ dist/game/data/stats/npcs/29300-29399.xml
@@ -5672,7 +5672,12 @@
 		</collision>
 	</npc>
 	<npc id="29387" level="120" type="RaidBoss" name="Antharas" title="Earth Dragon">
-		<!-- AUTO GENERATED NPC TODO: FIX IT -->
+		<parameters>
+			<skill name="Skill01_ID" id="34307" level="1" />
+			<skill name="Skill02_ID" id="34308" level="1" />
+			<skill name="Skill03_ID" id="34309" level="1" />
+			<skill name="Skill04_ID" id="34310" level="1" />
+		</parameters>
 		<race>HUMANOID</race>
 		<sex>MALE</sex>
 		<acquire exp="6625764933" sp="5963188" />
@@ -5682,11 +5687,20 @@
 			<defence physical="301296" magical="1458092" />
 			<speed>
 				<walk ground="60" />
-				<run ground="250" />
+				<run ground="180" />
 			</speed>
 			<hitTime>600</hitTime>
+			<attribute>
+				<defence fire="2050" water="2050" wind="2000" earth="2050" holy="2050" dark="2050" />
+				<attack type="WIND" value="1950" />
+			</attribute>
 		</stats>
-		<status attackable="true" />
+		<status attackable="true" noSleepMode="true"  />
+		<ai type="MAGE" clanHelpRange="2000" aggroRange="2000" isAggressive="true">
+			<clanList>
+				<clan>ANTHARAS</clan>
+			</clanList>
+		</ai>
 		<collision>
 			<radius normal="33" />
 			<height normal="90" />
@@ -5699,10 +5713,19 @@
 			<skill id="32675" level="1" /> <!-- Improved Immunity -->
 			<skill id="14804" level="10" /> <!-- Damage Reflection Resistance -->
 			<skill id="32968" level="1" /> <!-- Shield of Limit -->
+			<skill id="34307" level="1" /> <!-- Antharas' Smash -->
+			<skill id="34308" level="1" /> <!-- Antharas' Stigma -->
+			<skill id="34309" level="1" /> <!-- Antharas' Giant Stone Throw -->
+			<skill id="34310" level="1" /> <!-- Earth Scratch -->
 		</skillList>
 	</npc>
 	<npc id="29388" level="120" type="Monster" name="Antharas" title="Earth Dragon's Avatar">
-		<!-- AUTO GENERATED NPC TODO: FIX IT -->
+		<parameters>
+			<skill name="Skill01_ID" id="34307" level="1" />
+			<skill name="Skill02_ID" id="34308" level="1" />
+			<skill name="Skill03_ID" id="34309" level="1" />
+			<skill name="Skill04_ID" id="34310" level="1" />
+		</parameters>
 		<race>HUMANOID</race>
 		<sex>MALE</sex>
 		<stats str="88" int="79" dex="55" wit="78" con="82" men="78">
@@ -5714,8 +5737,17 @@
 				<run ground="250" />
 			</speed>
 			<hitTime>600</hitTime>
+			<attribute>
+				<defence fire="2050" water="2050" wind="2000" earth="2050" holy="2050" dark="2050" />
+				<attack type="WIND" value="1950" />
+			</attribute>
 		</stats>
-		<status attackable="true" />
+		<status attackable="true" noSleepMode="true" />
+		<ai type="MAGE" clanHelpRange="4000" aggroRange="4000" isAggressive="true">
+			<clanList>
+				<clan>ANTHARAS</clan>
+			</clanList>
+		</ai>
 		<collision>
 			<radius normal="33" />
 			<height normal="90" />
@@ -5723,11 +5755,15 @@
 		<skillList>
 			<skill id="4416" level="6" /> <!-- Humanoids -->
 			<skill id="5465" level="1" /> <!-- Earth Attribute -->
-			<skill id="14765" level="3" /> <!-- Vampiric Rage Resistance -->
+			<skill id="14765" level="4" /> <!-- Vampiric Rage Resistance -->
 			<skill id="4122" level="1" /> <!-- Antharas -->
 			<skill id="32675" level="1" /> <!-- Improved Immunity -->
 			<skill id="14804" level="10" /> <!-- Damage Reflection Resistance -->
 			<skill id="32968" level="1" /> <!-- Shield of Limit -->
+			<skill id="34307" level="1" /> <!-- Antharas' Smash -->
+			<skill id="34308" level="1" /> <!-- Antharas' Stigma -->
+			<skill id="34309" level="1" /> <!-- Antharas' Giant Stone Throw -->
+			<skill id="34310" level="1" /> <!-- Earth Scratch -->
 		</skillList>
 	</npc>
 	<npc id="29389" level="85" type="Folk" name="">
@@ -5750,7 +5786,11 @@
 		</collision>
 	</npc>
 	<npc id="29390" level="120" type="Monster" name="Antharas' Symbol">
-		<!-- AUTO GENERATED NPC TODO: FIX IT -->
+		<parameters>
+			<param name="NoFnHi" value="1" />
+			<param name="MoveAroundSocial" value="0" />
+			<param name="MoveAroundSocial1" value="0" />
+		</parameters>
 		<race>ETC</race>
 		<sex>MALE</sex>
 		<stats str="88" int="79" dex="55" wit="78" con="82" men="78">
@@ -5759,15 +5799,24 @@
 			<defence physical="753240" magical="364523" />
 			<speed>
 				<walk ground="1" />
-				<run ground="1" />
+				<run ground="0" />
 			</speed>
 			<hitTime>600</hitTime>
 		</stats>
-		<status attackable="true" />
+		<status attackable="true" undying="false" canMove="false" targetable="true" />
 		<collision>
 			<radius normal="60" />
 			<height normal="100.5" />
 		</collision>
+				<skillList>
+			<skill id="4416" level="2" /> <!-- Magical Creatures -->
+			<skill id="4408" level="1" /> <!-- HP Increase (1x) -->
+			<skill id="4409" level="1" /> <!-- MP Increase (1x) -->
+			<skill id="4410" level="11" /> <!-- Average Damage Dealer -->
+			<skill id="4411" level="11" /> <!-- Average M. Atk. -->
+			<skill id="4412" level="11" /> <!-- Average P. Def. -->
+			<skill id="4413" level="11" /> <!-- Average M. Def. -->
+				</skillList>
 	</npc>
 	<npc id="29391" level="127" type="RaidBoss" name="Baium" title="Elmoreden's Emperor">
 		<!-- AUTO GENERATED NPC TODO: FIX IT -->
diff --git dist/game/data/stats/skills/34300-34399.xml dist/game/data/stats/skills/34300-34399.xml
index 6472a5a..22066ce 100644
--- dist/game/data/stats/skills/34300-34399.xml
+++ dist/game/data/stats/skills/34300-34399.xml
@@ -38,21 +38,170 @@
 		<!-- Common. -->
 		<icon>icon.skill0000</icon>
 		<operateType>A1</operateType>
+		<castRange>600</castRange>
+		<hitTime>1300</hitTime>
+		<effectPoint>-100</effectPoint>
+		<reuseDelay>1000</reuseDelay> 
+		<attributeType>FIRE</attributeType>
+		<attributeValue>180</attributeValue>
+		<abnormalResists>TURN_FLEE;KNOCKDOWN;DEPORT;SILENCE;PARALYZE;ABSORB;DISARM;SILENCE_PHYSICAL;SILENCE_ALL;CHANGEBODY;TURN_STONE;DERANGEMENT;AIRBIND;SLEEP;OBLIVION;MIRAGE;MIRAGE_TRAP;ROOT_MAGICALLY;ROOT_PHYSICALLY;STUN;PUBLIC_SLOT</abnormalResists>
+		<magicCriticalRate>-5</magicCriticalRate>
+		<effectRange>350</effectRange>
+		<magicLevel>97</magicLevel>
+		<!-- <nextAction>CAST</nextAction> -->
+		<fanRange>0;0;500;300</fanRange>
+		<coolTime>300</coolTime>
+		<targetType>ENEMY</targetType>
+		<affectScope>SQUARE</affectScope>
+		<affectObject>NOT_FRIEND</affectObject>
+		<effects>
+			<effect name="MagicalAttack">
+				<power>300</power>
+			</effect>
+		</effects>
 	</skill>
 	<skill id="34308" toLevel="1" name="Antharas' Stigma">
 		<!-- A Stun effect from Antharas' powerful attack. The effect cannot be guarded against. -->
 		<icon>icon.s_raid_antaras_stamp1</icon>
-		<operateType>A1</operateType>
+		<operateType>A2</operateType>
+		<isDebuff>true</isDebuff>
+		<castRange>1500</castRange>
+		<reuseDelay>6000</reuseDelay>
+		<hitTime>3600</hitTime>
+		<coolTime>1400</coolTime>
+		<effectPoint>-100</effectPoint>
+		<abnormalType>STUN</abnormalType>
+		<abnormalVisualEffect>STUN</abnormalVisualEffect>
+		<abnormalResists>TURN_FLEE;KNOCKDOWN;DEPORT;SILENCE;PARALYZE;ABSORB;DISARM;SILENCE_PHYSICAL;SILENCE_ALL;CHANGEBODY;TURN_STONE;DERANGEMENT;AIRBIND;SLEEP;OBLIVION;MIRAGE;MIRAGE_TRAP;ROOT_MAGICALLY;ROOT_PHYSICALLY;STUN;PUBLIC_SLOT</abnormalResists>
+		<basicProperty>NONE</basicProperty>
+		<magicCriticalRate>-5</magicCriticalRate>
+		<magicLevel>97</magicLevel>
+		<abnormalLevel>1</abnormalLevel>
+		<abnormalTime>3</abnormalTime>
+		<trait>SHOCK</trait>
+		<attributeType>FIRE</attributeType>
+		<attributeValue>180</attributeValue>
+		<affectRange>800</affectRange>
+		<isDebuff>true</isDebuff>
+		<targetType>SELF</targetType>
+		<affectScope>POINT_BLANK</affectScope>
+		<affectObject>NOT_FRIEND</affectObject>
+		<effects>
+			<effect name="PhysicalAttack">
+				<power>2000</power>
+			</effect>
+			<effect name="BlockActions">
+				<allowedSkills>10279;10517;10025;10776;11770;1904;11264;11093;13314;1912;7002;18721;18722;28203;30516;35190</allowedSkills>
+			</effect>
+		</effects>
 	</skill>
 	<skill id="34309" toLevel="1" name="Giant Stone Throw">
 		<!-- A Knockdown effect after Antharas' giant stone throw. The effect cannot be guarded against. -->
 		<icon>icon.s_raid_antaras_giant_rock_shooting1</icon>
-		<operateType>A1</operateType>
+		<abnormalLevel>2</abnormalLevel>
+		<abnormalTime>3</abnormalTime>
+		<abnormalType>KNOCKDOWN</abnormalType>
+		<abnormalVisualEffect>KNOCKDOWN</abnormalVisualEffect>
+		<activateRate>
+			<value fromLevel="1" toLevel="11">50</value>
+			<value fromLevel="3" toLevel="11" fromSubLevel="2001" toSubLevel="2020">{base + (base / 100 * subIndex)}</value>
+		</activateRate>
+		<!-- <affectLimit>5-12</affectLimit> -->
+		<affectRange>500</affectRange>
+		<basicProperty>PHYSICAL</basicProperty> <!-- Guessed -->
+		<lvlBonusRate>1</lvlBonusRate>
+		<magicLevel>117</magicLevel>
+		<trait>KNOCKDOWN</trait>
+		<operateType>A2</operateType>
+		<targetType>ENEMY</targetType>
+		<affectScope>RANGE</affectScope>
+		<affectObject>NOT_FRIEND</affectObject>
+		<castRange>2000</castRange>
+		<hitTime>3600</hitTime>
+		<effectPoint>-507</effectPoint>
+		<isDebuff>true</isDebuff>
+		<effects>
+			<effect name="PhysicalAttack">
+				<power>
+					<value level="1">22536</value>
+					<value level="2">26428</value>
+					<value level="3">29542</value>
+					<value level="4">32656</value>
+					<value level="5">35788</value>
+					<value level="6">37424</value>
+					<value level="7">39060</value>
+					<value level="8">41514</value>
+					<value level="9">43968</value>
+					<value level="10">48365</value>
+					<value level="11">53202</value>
+					<value fromLevel="3" toLevel="11" fromSubLevel="1001" toSubLevel="1020">{base + (base / 100 * subIndex)}</value>
+				</power>
+				<ignoreShieldDefence>true</ignoreShieldDefence>
+				<overHit>true</overHit>
+			</effect>
+			<effect name="BlockActions">
+				<allowedSkills>10279;10517;10025;10776;11770;1904;11264;11093;13314;1912;7002;18721;18722;28203;30516;35190</allowedSkills>
+			</effect>
+			<effect name="TargetCancel" />
+			<effect name="PhysicalDefence" fromLevel="3" toLevel="11" fromSubLevel="3001" toSubLevel="3020">
+				<amount>
+					<value fromLevel="3" toLevel="11" fromSubLevel="3001" toSubLevel="3020">{-0.6 - (0.4 * subIndex)}</value>
+				</amount>
+				<mode>PER</mode>
+			</effect>
+		</effects>
 	</skill>
 	<skill id="34310" toLevel="1" name="Earth Scratch">
 		<!-- A Knockdown effect from a powerful ground-breaking attack. The effect cannot be guarded against. -->
 		<icon>icon.s_raid_antaras_scratch_earth1</icon>
-		<operateType>A1</operateType>
+		<abnormalLevel>1</abnormalLevel>
+		<abnormalTime>3</abnormalTime>
+		<abnormalType>KNOCKDOWN</abnormalType>
+		<abnormalVisualEffect>KNOCKDOWN</abnormalVisualEffect>
+		<basicProperty>PHYSICAL</basicProperty>
+		<attributeType>FIRE</attributeType>
+		<attributeValue>180</attributeValue>
+		<activateRate>100</activateRate>
+		<affectRange>1000</affectRange>
+		<operateType>A2</operateType>
+		<magicCriticalRate>25</magicCriticalRate>
+		<magicLevel>114</magicLevel>
+		<castRange>500</castRange>
+		<hitTime>3700</hitTime>
+		<coolTime>1000</coolTime>
+		<reuseDelay>5000</reuseDelay>
+		<effectPoint>-716</effectPoint>
+		<isDebuff>true</isDebuff>
+		<effectRange>2600</effectRange>
+		<trait>KNOCKDOWN</trait>
+		<isMagic>0</isMagic>
+		<targetType>ENEMY</targetType>
+		<affectScope>SQUARE</affectScope>
+		<affectObject>NOT_FRIEND</affectObject>
+		<fanRange>0;0;4000;700</fanRange>
+		<!-- <affectLimit>5-12</affectLimit> -->
+		<!-- <nextAction>CAST</nextAction> -->
+		<effects>
+			<effect name="PhysicalAttack">
+				<power>97730</power>
+				<overHit>true</overHit>
+				<criticalChance>
+					<value fromLevel="1" toLevel="9">10</value>
+					<value fromLevel="1" toLevel="9" fromSubLevel="2001" toSubLevel="2020">{base + (base / 100 * subIndex)}</value>				</criticalChance>
+			</effect>
+			<effect name="BlockActions">
+				<allowedSkills>10279;10517;10025;10776;11770;1904;11264;11093;13314;1912;7002;18721;18722;28203;30516;35190</allowedSkills>
+			</effect>
+			<effect name="DefenceTrait">
+				<HOLD>100</HOLD>
+				<KNOCKDOWN>100</KNOCKDOWN>
+				<SHOCK>100</SHOCK>
+				<AIRBIND>100</AIRBIND>
+				<SLEEP>100</SLEEP>
+				<KNOCKBACK>100</KNOCKBACK>
+				<CHANGEBODY>100</CHANGEBODY>
+			</effect>
+		</effects>
 	</skill>
 	<skill id="34311" toLevel="1" name="Earthquake">
 		<!-- A powerful earthquake deals damage and knocks down. The effect cannot be guarded against. -->
@@ -77,7 +226,22 @@
 	<skill id="34315" toLevel="1" name="Antharas' Earth Guard">
 		<!-- Antharas' Symbol increases HP to the maximum. Available after consuming all of Antharas' Symbols. If you have Antharas' Symbol, a broken symbol appears after a while. -->
 		<icon>icon.pk</icon>
-		<operateType>A1</operateType>
+		<abnormalLevel>3</abnormalLevel>
+		<abnormalType>HP_REGEN_UP</abnormalType>
+		<magicLevel>-1</magicLevel>
+		<operateType>A2</operateType>
+		<basicProperty>NONE</basicProperty>
+		<magicCriticalRate>-5</magicCriticalRate>
+		<specialLevel>-1</specialLevel>
+		<hitCancelTime>0</hitCancelTime>
+		<targetType>SELF</targetType>
+		<affectScope>SINGLE</affectScope>
+		<effects>
+			<effect name="HpRegen">
+				<amount>2000000</amount>
+				<ticks>255</ticks>
+			</effect>
+		</effects>
 	</skill>
 	<skill id="34316" toLevel="1" name="Antharas' Rage">
 		<!-- Antharas' rage is so strong that it deals a lot of damage and knocks down. The effect cannot be guarded against. -->
